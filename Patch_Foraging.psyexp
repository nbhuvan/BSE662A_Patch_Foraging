<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1440, 900]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Patch_Foraging_19_12_30am" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="Welcome">
      <TextComponent name="Welcometext">
        <Param val="1.0000, 1.0000, 1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Welcometext" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome&amp;#10;Please press Spacebar to start" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="exp_start">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="exp_start" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="End">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This is the end of current trial, now next trial will begin.&amp;#10;Thank you" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ViewPatch">
      <CodeComponent name="view">
        <Param val="import os&amp;#10;from psychopy import visual, event, core, data&amp;#10;from pathlib import Path&amp;#10;import random" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#competitors = [[1,4],[5,1],[2,5]]&amp;#10;##competitors = [[1,4]]&amp;#10;#&amp;#10;#state_c = random.randint(0,2)&amp;#10;##state_c = 0&amp;#10;#state_t = random.randint(0,1)&amp;#10;##state_t = 1&amp;#10;#state_r = random.randint(1,5)&amp;#10;#&amp;#10;#l_c = competitors[state_c][0]&amp;#10;#r_c = competitors[state_c][1]&amp;#10;#&amp;#10;#rect_l = []&amp;#10;#rect_r = []&amp;#10;#img_tree = []&amp;#10;#img_ltree = []&amp;#10;#img_rtree = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="clock = core.Clock()&amp;#10;&amp;#10;c1 = -250&amp;#10;c2 = 250&amp;#10;&amp;#10;box_t = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=1000,&amp;#10;    height=700,&amp;#10;    fillColor= 'red',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;&amp;#10;box1 = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=400,&amp;#10;    height=600,&amp;#10;    fillColor= 'black',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;box1.pos = [c1,0]&amp;#10;&amp;#10;box2 = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=400,&amp;#10;    height=600,&amp;#10;    fillColor= 'black',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;box2.pos = [c2,0]&amp;#10;&amp;#10;&amp;#10;for i in range(l_c):&amp;#10;    rect_x = visual.Rect(win, units=&quot;pix&quot;,&amp;#10;        width=30,&amp;#10;        height=30,&amp;#10;        fillColor= 'yellow')&amp;#10;    rect_l.append(rect_x)&amp;#10;&amp;#10;for i in range(l_c):&amp;#10;    x = random.uniform(-1, 1)&amp;#10;    y = random.uniform(-1,1)&amp;#10;    x = x*185&amp;#10;    y = y*285&amp;#10;    rect_l[i].pos = [c1+x,y]&amp;#10;&amp;#10;for i in range(r_c):&amp;#10;    rect_x = visual.Rect(win, units=&quot;pix&quot;,&amp;#10;        width=30,&amp;#10;        height=30,&amp;#10;        fillColor= 'yellow')&amp;#10;    rect_r.append(rect_x)&amp;#10;&amp;#10;for i in range(r_c):&amp;#10;    x = random.uniform(-1, 1)&amp;#10;    y = random.uniform(-1,1)&amp;#10;    x = x*185&amp;#10;    y = y*285&amp;#10;    rect_r[i].pos = [c2+x,y]&amp;#10;&amp;#10;&amp;#10;for i in range(state_r):&amp;#10;    img = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        image=&quot;tree.png&quot;,&amp;#10;        units=&quot;pix&quot;&amp;#10;    )&amp;#10;    size_x = img.size[0]&amp;#10;    size_y = img.size[1]&amp;#10;    img.size = [size_x * 0.15, size_y * 0.15]&amp;#10;#    print(img.size)&amp;#10;    img_tree.append(img)&amp;#10;&amp;#10;for i in range(state_r):&amp;#10;    img = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        image=&quot;tree.png&quot;,&amp;#10;        units=&quot;pix&quot;&amp;#10;    )&amp;#10;    size_x = img.size[0]&amp;#10;    size_y = img.size[1]&amp;#10;    img.size = [size_x * 0.15, size_y * 0.15]&amp;#10;    img_ltree.append(img)&amp;#10;    &amp;#10;for i in range(state_r):&amp;#10;    img = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        image=&quot;tree.png&quot;,&amp;#10;        units=&quot;pix&quot;&amp;#10;    )&amp;#10;    size_x = img.size[0]&amp;#10;    size_y = img.size[1]&amp;#10;    img.size = [size_x * 0.15, size_y * 0.15]&amp;#10;    img_rtree.append(img)&amp;#10;    &amp;#10;#print(len(img_ltree))&amp;#10;#print(len(img_rtree))&amp;#10;&amp;#10;for i in range(len(img_tree)):&amp;#10;    x = random.uniform(-1, 1)&amp;#10;    y = random.uniform(-1,1)&amp;#10;    size_x = img_tree[0].size[0]&amp;#10;    size_y = img_tree[0].size[1]&amp;#10;    &amp;#10;    x = x*(200-size_x)&amp;#10;    y = y*(300-size_y)&amp;#10;#    print(x,y)&amp;#10;    img_tree[i].pos = [x,y]&amp;#10;&amp;#10;for i in range(len(img_tree)):&amp;#10;    pos = img_tree[i].pos&amp;#10;    x_l = pos[0] + c1&amp;#10;    y_l = pos[1]&amp;#10;    x_r = pos[0] + c2&amp;#10;    y_r = pos[1]&amp;#10;    print(pos)&amp;#10;    print(x_l,y_l)&amp;#10;    print(x_r,y_r)&amp;#10;    img_ltree[i].pos = [x_l,y_l]&amp;#10;    img_rtree[i].pos = [x_r,y_r]&amp;#10;    &amp;#10;&amp;#10;#for i in range(len(img_rtree)):&amp;#10;#    posr = img_tree[i].pos&amp;#10;#    x = posr[0] + c2&amp;#10;#    y = posr[1]&amp;#10;#    print(x,y)&amp;#10;#    img_rtree[i].pos = [x,y]&amp;#10;&amp;#10;clock.reset()&amp;#10;while clock.getTime() &lt; 5: # draw moving stimulus&amp;#10;    if state_t:&amp;#10;        box_t.draw()&amp;#10;    box1.draw()&amp;#10;    box2.draw()&amp;#10;    &amp;#10;    for i in range(state_r):&amp;#10;#        img_ltree[i].draw()&amp;#10;        img_rtree[i].draw()&amp;#10;        img_ltree[i].draw()&amp;#10;&amp;#10;    for i in range(l_c):&amp;#10;        rect_l[i].draw()&amp;#10;    for i in range(r_c):&amp;#10;        rect_r[i].draw()&amp;#10;    &amp;#10;    win.flip() # make the drawn things visible&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('left_competitors', l_c)&amp;#10;thisExp.addData('right_competitors', r_c)&amp;#10;thisExp.addData('threat', state_t)&amp;#10;thisExp.addData('no_rewards', state_r)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="view" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Patch_Selection">
      <KeyboardComponent name="key_resp">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Foraging">
      <CodeComponent name="code_2">
        <Param val="import os&amp;#10;from psychopy import visual, event, core&amp;#10;import random&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#reward_value = 10;&amp;#10;#cap_time =-1;&amp;#10;#reward_captured = 0&amp;#10;#reward_nc = 0&amp;#10;#captured_index = []&amp;#10;#shock = 0&amp;#10;#reward_treepos = [[500,40],[580,40],[660,40],[500,-40],[580,-40],[660,-40]]&amp;#10;#&amp;#10;#&amp;#10;#def motion(p_pos): #motion function&amp;#10;#    k = event.getKeys()&amp;#10;#    if k: # if there was an actual key pressed:&amp;#10;#        if k[0] == 'left':&amp;#10;#            p_pos[0] += LEFT&amp;#10;#        elif k[0] == 'right':&amp;#10;#            p_pos[0] += RIGHT&amp;#10;#        elif k[0] == 'up':&amp;#10;#            p_pos[1] += RIGHT&amp;#10;#        elif k[0] == 'down':&amp;#10;#            p_pos[1] += LEFT&amp;#10;#        elif k[0] == 'q':&amp;#10;#            core.quit()&amp;#10;##            &amp;#10;#    if p_pos[0] &gt; (200-15):&amp;#10;#        p_pos[0] = (200-15)&amp;#10;#    elif p_pos[0]&lt;-(200-15):&amp;#10;#        p_pos[0] = -(200-15)&amp;#10;#    if p_pos[1]&gt; (300-15):&amp;#10;#        p_pos[1] = (300-15)&amp;#10;#    elif p_pos[1]&lt;-(300-15):&amp;#10;#        p_pos[1] = -(300-15)&amp;#10;#    return p_pos&amp;#10;    " valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="f" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="box = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=400,&amp;#10;    height=600,&amp;#10;    fillColor= 'black',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;end_img = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        image=&quot;attacked.png&quot;,&amp;#10;        units=&quot;pix&quot;&amp;#10;)&amp;#10;&amp;#10;cap_txt = visual.TextBox2(&amp;#10;    win,&amp;#10;    &quot;Forage&quot;,&amp;#10;    font='Open Sans',&amp;#10;    units=&quot;pix&quot;,&amp;#10;    color=(1, 0, 0), &amp;#10;    colorSpace='rgb',&amp;#10;    letterHeight = 40&amp;#10;)&amp;#10;&amp;#10;reward_txt = visual.TextBox2( # text showed when reward is caputures&amp;#10;    win,&amp;#10;    &quot;Rewards Gained&quot;,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    color= (1, 0, 0), &amp;#10;    colorSpace='rgb',&amp;#10;    letterHeight = 40&amp;#10;)&amp;#10;&amp;#10;reward_txt.pos = [880,160]&amp;#10;reward_box = visual.Rect( # box for the selected patch&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=240,&amp;#10;    height=160,&amp;#10;    fillColor= 'black',&amp;#10;    lineColor= 'green'&amp;#10;)&amp;#10;reward_box.pos = [580,0]&amp;#10;&amp;#10;&amp;#10;cap_txt.pos= [box.pos[0]+ 150,325]&amp;#10;cap_txt.draw()&amp;#10;box.draw()&amp;#10;print(&quot;Trial started&quot;);&amp;#10;data = thisExp.getAllEntries()&amp;#10;key = data[n_trials]['key_resp.keys']&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;if key == 'left':&amp;#10;    for i in range(len(rect_l)):&amp;#10;        position = rect_l[i].pos&amp;#10;        position[0] -= -250&amp;#10;        rect_l[i].pos = position&amp;#10;    #        &amp;#10;    n = len(rect_l)&amp;#10;    p = random.randint(0,n-1)&amp;#10;   # print(key)&amp;#10;    clock = core.Clock()&amp;#10;&amp;#10;    LEFT = -10&amp;#10;    RIGHT = 10&amp;#10;    rect = visual.Rect(&amp;#10;        win=win,&amp;#10;        units=&quot;pix&quot;,&amp;#10;        width=400,&amp;#10;        height=600,&amp;#10;        fillColor= 'black',&amp;#10;        lineColor=[-1, -1, 1]&amp;#10;    )&amp;#10;&amp;#10;    clock.reset()&amp;#10;    &amp;#10;    p_pos = rect_l[p].pos&amp;#10;    depriciated_reward =[];&amp;#10;    &amp;#10;    reward_list = list(range(state_r));&amp;#10;    rect_list = list(range(l_c))&amp;#10;    #print(&quot;state_r&quot;,l_c);&amp;#10;    if l_c==1:&amp;#10;        dep_rate = 10&amp;#10;    else:&amp;#10;        dep_rate = 7 - l_c;&amp;#10;    reward_ctr = dep_rate;&amp;#10;    attack_time = 2;&amp;#10;    flag=0;&amp;#10;    while clock.getTime()&lt;10: # draw moving stimulus&amp;#10;        if(clock.getTime() &gt; reward_ctr):&amp;#10;            reward_ctr= reward_ctr + dep_rate; &amp;#10;            if(len(reward_list)&gt;=1):&amp;#10;                rnd = random.randint(0,len(reward_list)-1)&amp;#10;                del reward_list[rnd]&amp;#10;        if state_t == 1:&amp;#10;            pred_x = random.randint(-150, 150)&amp;#10;            pred_y = random.randint(-250, 250)&amp;#10;#            pred_x = pred_x - 250&amp;#10;            if clock.getTime() &gt; attack_time:&amp;#10;                attack_time = attack_time + 2&amp;#10;                dist = []&amp;#10;                del_comp = 0;&amp;#10;                print(&quot;number of comp is &quot;,len(rect_l))&amp;#10;                for i in rect_list:&amp;#10;                    dist.append([pow(abs(rect_l[i].pos[0]-pred_x),2) + pow(abs(rect_l[i].pos[1]-pred_y),2),i])&amp;#10;                dist.sort()&amp;#10;                print(dist)&amp;#10;                if(dist[0][0] &lt; 500000):&amp;#10;                    del_comp = dist[0][1];&amp;#10;#                    print(i)&amp;#10;#                    del rect_l[del_comp];&amp;#10;#                    print(rect_list)&amp;#10;#                    print(del_comp)&amp;#10;                    if del_comp==p:&amp;#10;                        shock = -100&amp;#10;                        cap_txt.text= &quot;Attacked by Predator&quot;;&amp;#10;                        print(&quot;Attacked by Predator&quot;)&amp;#10;                        flag=1;&amp;#10;                    for i1 in range(len(rect_list)):&amp;#10;#                        print(i1)&amp;#10;                        if rect_list[i1]==del_comp:&amp;#10;                            del rect_list[i1]&amp;#10;                            break&amp;#10;&amp;#10;        if(flag):&amp;#10;            while(clock.getTime()&lt;10):&amp;#10;                end_img.draw()&amp;#10;                win.flip()&amp;#10;#            core.wait(10-clock.getTime())&amp;#10;        else:&amp;#10;            p_pos = motion(p_pos) #captures the motion&amp;#10;            rect_l[p].pos = p_pos # directly update both x *and* y&amp;#10;            box.draw()&amp;#10;            for i,j in enumerate(reward_list):&amp;#10;                ind_tree = img_tree[j];&amp;#10;                tree_pos_x = ind_tree.pos[0];&amp;#10;                tree_pos_y= ind_tree.pos[1];&amp;#10;            &amp;#10;                if(abs(p_pos[0]-tree_pos_x)&lt; 20 and  abs(p_pos[1]-tree_pos_y)&lt; 20):&amp;#10;                    cap_txt.text= &quot;Reward Captured&quot;;&amp;#10;                    captured_index.append(j)&amp;#10;                    del reward_list[i]&amp;#10;                    img_tree[j].pos = reward_treepos[reward_nc]&amp;#10;                    reward_captured += 100&amp;#10;                    cap_time = clock.getTime();&amp;#10;                    reward_nc +=1&amp;#10;                # print(&quot;capture Time&quot;,cap_time);&amp;#10;&amp;#10;            if(cap_time &lt; clock.getTime()- 0.7 ):&amp;#10;                cap_txt.text= &quot;Forage&quot;;&amp;#10;            reward_box.draw()&amp;#10;            reward_txt.draw()&amp;#10;            for i in rect_list:&amp;#10;                rect_l[i].draw()&amp;#10;            for i in reward_list:&amp;#10;                img_tree[i].draw()&amp;#10;            for i in captured_index:&amp;#10;                img_tree[i].draw()&amp;#10;            cap_txt.draw();&amp;#10;            win.flip() # make the drawn things visible&amp;#10;else:&amp;#10;    for i in range(len(rect_r)):&amp;#10;        position = rect_r[i].pos&amp;#10;        position[0] -= 250&amp;#10;        rect_r[i].pos = position&amp;#10;    #        &amp;#10;    n = len(rect_r)&amp;#10;    p = random.randint(0,n-1)&amp;#10;#    print(key)&amp;#10;    clock = core.Clock()&amp;#10;&amp;#10;    LEFT = -10&amp;#10;    RIGHT = 10&amp;#10;    rect = visual.Rect(&amp;#10;        win=win,&amp;#10;        units=&quot;pix&quot;,&amp;#10;        width=400,&amp;#10;        height=600,&amp;#10;        fillColor= 'black',&amp;#10;        lineColor=[-1, -1, 1]&amp;#10;    )&amp;#10;&amp;#10;    clock.reset()&amp;#10;    p_pos = rect_r[p].pos&amp;#10;    reward_list = list(range(state_r));&amp;#10;    rect_list = list(range(r_c))&amp;#10;    if r_c==1:&amp;#10;        dep_rate = 10&amp;#10;    else:&amp;#10;        dep_rate = 7 - r_c;&amp;#10;    reward_ctr = dep_rate;&amp;#10;    attack_time = 2;&amp;#10;    flag=0;&amp;#10;    while clock.getTime()&lt;10: # draw moving stimulus&amp;#10;        if(clock.getTime() &gt; reward_ctr):&amp;#10;            reward_ctr= reward_ctr + dep_rate; &amp;#10;            if(len(reward_list)&gt;=1):&amp;#10;                rnd = random.randint(0,len(reward_list)-1)&amp;#10;                del reward_list[rnd]&amp;#10;        if state_t == 1:&amp;#10;            pred_x = random.randint(-150, 150)&amp;#10;            pred_y = random.randint(-250, 250)&amp;#10;#            pred_x = pred_x - 250&amp;#10;            if clock.getTime() &gt; attack_time:&amp;#10;                attack_time = attack_time + 2&amp;#10;                dist = []&amp;#10;                del_comp = 0;&amp;#10;                print(&quot;number of comp is &quot;,len(rect_r))&amp;#10;                for i in rect_list:&amp;#10;                    dist.append([pow(abs(rect_r[i].pos[0]-pred_x),2) + pow(abs(rect_r[i].pos[1]-pred_y),2),i])&amp;#10;                dist.sort()&amp;#10;                print(dist)&amp;#10;                if(dist[0][0] &lt; 500000):&amp;#10;                    del_comp = dist[0][1];&amp;#10;#                    print(i)&amp;#10;#                    del rect_r[del_comp];&amp;#10;                    if del_comp==p:&amp;#10;                        shock = -100&amp;#10;                        cap_txt.text= &quot;Attacked by Predator&quot;;&amp;#10;                        print(&quot;Attacked by Predator&quot;)&amp;#10;                        flag=1;&amp;#10;                    for i1 in range(len(rect_list)):&amp;#10;                        if rect_list[i1]==del_comp:&amp;#10;                            del rect_list[i1]&amp;#10;                            break&amp;#10;        if(flag):&amp;#10;            while(clock.getTime()&lt;10):&amp;#10;                end_img.draw()&amp;#10;                win.flip()&amp;#10;        else:&amp;#10;            p_pos = motion(p_pos) #captures the motion&amp;#10;            rect_r[p].pos = p_pos # directly update both x *and* y&amp;#10;            box.draw()&amp;#10;            for i,j in enumerate(reward_list):&amp;#10;                ind_tree = img_tree[j];&amp;#10;                tree_pos_x = ind_tree.pos[0];&amp;#10;                tree_pos_y= ind_tree.pos[1];&amp;#10;            &amp;#10;                if(abs(p_pos[0]-tree_pos_x)&lt; 20 and  abs(p_pos[1]-tree_pos_y)&lt; 20):&amp;#10;                    cap_txt.text= &quot;Reward Captured&quot;;&amp;#10;                    captured_index.append(j)&amp;#10;                    del reward_list[i]&amp;#10;                    img_tree[j].pos = reward_treepos[reward_nc]&amp;#10;                    reward_captured += 100&amp;#10;                    cap_time = clock.getTime();&amp;#10;                    reward_nc +=1&amp;#10;                # print(&quot;capture Time&quot;,cap_time);&amp;#10;&amp;#10;            if(cap_time &lt; clock.getTime()- 0.7 ):&amp;#10;                cap_txt.text= &quot;Forage&quot;;&amp;#10;            reward_box.draw()&amp;#10;            reward_txt.draw()&amp;#10;            for i in rect_list:&amp;#10;                rect_r[i].draw()&amp;#10;            for i in reward_list:&amp;#10;                img_tree[i].draw()&amp;#10;            for i in captured_index:&amp;#10;                img_tree[i].draw()&amp;#10;            cap_txt.draw();&amp;#10;            win.flip() # make the drawn things visible&amp;#10;reward_nc = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('rewards_captured', reward_captured)&amp;#10;thisExp.addData('shock', shock)&amp;#10;n_trials += 1&amp;#10;#competitors = [[1,4],[5,1],[2,5]]&amp;#10;##competitors = [[1,4]]&amp;#10;#&amp;#10;#state_c = random.randint(0,2)&amp;#10;##state_c = 0&amp;#10;#state_t = random.randint(0,1)&amp;#10;##state_t = 1&amp;#10;#state_r = random.randint(1,5)&amp;#10;&amp;#10;#l_c = competitors[state_c][0]&amp;#10;#r_c = competitors[state_c][1]&amp;#10;#&amp;#10;#rect_l = []&amp;#10;#rect_r = []&amp;#10;#img_tree = []&amp;#10;#img_ltree = []&amp;#10;#img_rtree = []&amp;#10;#&amp;#10;#&amp;#10;#reward_value = 10;&amp;#10;#cap_time =-1;&amp;#10;#reward_captured = 0&amp;#10;#reward_nc = 0&amp;#10;#captured_index = []&amp;#10;#shock = 0&amp;#10;#reward_treepos = [[500,40],[580,40],[660,40],[500,-40],[580,-40],[660,-40]]&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="routine_1"/>
    <Routine name="routine"/>
    <Routine name="Forage">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import os&amp;#10;from psychopy import visual, event, core&amp;#10;&amp;#10;win = visual.Window(units = 'pix', color = 'black') # Set the window&amp;#10;&amp;#10;x = 0 # initial positions&amp;#10;y = 0&amp;#10;&amp;#10;LEFT = -100&amp;#10;RIGHT = 100&amp;#10;&amp;#10;# create just once, no need to specify a position yet:&amp;#10;circle = visual.Circle(win, radius = 10, fillColor= 'yellow')&amp;#10;&amp;#10;while True: # draw moving stimulus&amp;#10;    &amp;#10;    k = event.getKeys()&amp;#10;    if k: # if there was an actual key pressed:&amp;#10;        if k[0] == 'left':&amp;#10;            x = LEFT&amp;#10;        elif k[0] == 'right':&amp;#10;            x = RIGHT&amp;#10;        elif k[0] == 'q':&amp;#10;            core.quit()&amp;#10;&amp;#10;    y += 2 # make circle constantly move upwards&amp;#10;    circle.pos = [x, y] # directly update both x *and* y&amp;#10;    circle.draw()&amp;#10;    win.flip() # make the drawn things visible&amp;#10;&amp;#10;win.close()&amp;#10;core.quit()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Code">
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="n_trials = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="competitors = [[1,4],[5,1],[2,5]]&amp;#10;#competitors = [[1,4]]&amp;#10;&amp;#10;state_c = random.randint(0,2)&amp;#10;#state_c = 0&amp;#10;state_t = random.randint(0,1)&amp;#10;#state_t = 1&amp;#10;state_r = random.randint(1,5)&amp;#10;&amp;#10;l_c = competitors[state_c][0]&amp;#10;r_c = competitors[state_c][1]&amp;#10;&amp;#10;rect_l = []&amp;#10;rect_r = []&amp;#10;img_tree = []&amp;#10;img_ltree = []&amp;#10;img_rtree = []&amp;#10;&amp;#10;reward_value = 10;&amp;#10;cap_time =-1;&amp;#10;reward_captured = 0&amp;#10;reward_nc = 0&amp;#10;captured_index = []&amp;#10;shock = 0&amp;#10;reward_treepos = [[500,40],[580,40],[660,40],[500,-40],[580,-40],[660,-40]]&amp;#10;&amp;#10;&amp;#10;def motion(p_pos): #motion function&amp;#10;    k = event.getKeys()&amp;#10;    if k: # if there was an actual key pressed:&amp;#10;        if k[0] == 'left':&amp;#10;            p_pos[0] += LEFT&amp;#10;        elif k[0] == 'right':&amp;#10;            p_pos[0] += RIGHT&amp;#10;        elif k[0] == 'up':&amp;#10;            p_pos[1] += RIGHT&amp;#10;        elif k[0] == 'down':&amp;#10;            p_pos[1] += LEFT&amp;#10;        elif k[0] == 'q':&amp;#10;            core.quit()&amp;#10;#            &amp;#10;    if p_pos[0] &gt; (200-15):&amp;#10;        p_pos[0] = (200-15)&amp;#10;    elif p_pos[0]&lt;-(200-15):&amp;#10;        p_pos[0] = -(200-15)&amp;#10;    if p_pos[1]&gt; (300-15):&amp;#10;        p_pos[1] = (300-15)&amp;#10;    elif p_pos[1]&lt;-(300-15):&amp;#10;        p_pos[1] = -(300-15)&amp;#10;    return p_pos&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('left_competitors', l_c)&amp;#10;thisExp.addData('right_competitors', r_c)&amp;#10;thisExp.addData('threat', state_t)&amp;#10;thisExp.addData('no_rewards', state_r)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Welcome"/>
    <Routine name="Code"/>
    <Routine name="ViewPatch"/>
    <Routine name="Patch_Selection"/>
    <Routine name="Foraging"/>
    <Routine name="End"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
