<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="-1.0000, -1.0000, -1.0000" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="Patch_Foraging" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="keyboardBackend" updates="None" val="ioHub" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="plConfidenceThreshold" updates="None" val="0.6" valType="num"/>
    <Param name="plPupilCaptureRecordingEnabled" updates="None" val="True" valType="bool"/>
    <Param name="plPupilCaptureRecordingLocation" updates="None" val="" valType="str"/>
    <Param name="plPupilRemoteAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="plPupilRemotePort" updates="None" val="50020" valType="num"/>
    <Param name="plPupilRemoteTimeoutMs" updates="None" val="1000" valType="num"/>
    <Param name="plPupillometryOnly" updates="None" val="False" valType="bool"/>
    <Param name="plSurfaceName" updates="None" val="psychopy_iohub_surface" valType="str"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="Welcome">
      <TextComponent name="Welcometext">
        <Param name="color" updates="constant" val="1.0000, 1.0000, 1.0000" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="Welcometext" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Welcome&amp;#10;Please press Spacebar to start" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="exp_start">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="exp_start" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="End">
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This is the end of first trial, now next trial will begin.&amp;#10;Thank you" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="ViewPatch">
      <CodeComponent name="view">
        <Param name="Before Experiment" updates="constant" val="import os&amp;#10;from psychopy import visual, event, core, data&amp;#10;from pathlib import Path&amp;#10;import random" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="competitors = [[1,4],[5,1],[2,5]]&amp;#10;&amp;#10;state_c = random.randint(0,2)&amp;#10;state_t = random.randint(0,1)&amp;#10;state_r = random.randint(1,5)&amp;#10;&amp;#10;l_c = competitors[state_c][0]&amp;#10;r_c = competitors[state_c][1]&amp;#10;&amp;#10;rect_l = []&amp;#10;rect_r = []&amp;#10;img_tree = []&amp;#10;img_ltree = []&amp;#10;img_rtree = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="clock = core.Clock()&amp;#10;&amp;#10;c1 = -250&amp;#10;c2 = 250&amp;#10;&amp;#10;box_t = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=1000,&amp;#10;    height=700,&amp;#10;    fillColor= 'red',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;&amp;#10;box1 = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=400,&amp;#10;    height=600,&amp;#10;    fillColor= 'black',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;box1.pos = [c1,0]&amp;#10;&amp;#10;box2 = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=400,&amp;#10;    height=600,&amp;#10;    fillColor= 'black',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;box2.pos = [c2,0]&amp;#10;&amp;#10;&amp;#10;for i in range(l_c):&amp;#10;    rect_x = visual.Rect(win, units=&quot;pix&quot;,&amp;#10;        width=30,&amp;#10;        height=30,&amp;#10;        fillColor= 'yellow')&amp;#10;    rect_l.append(rect_x)&amp;#10;&amp;#10;for i in range(l_c):&amp;#10;    x = random.uniform(-1, 1)&amp;#10;    y = random.uniform(-1,1)&amp;#10;    x = x*185&amp;#10;    y = y*285&amp;#10;    rect_l[i].pos = [c1+x,y]&amp;#10;&amp;#10;for i in range(r_c):&amp;#10;    rect_x = visual.Rect(win, units=&quot;pix&quot;,&amp;#10;        width=30,&amp;#10;        height=30,&amp;#10;        fillColor= 'yellow')&amp;#10;    rect_r.append(rect_x)&amp;#10;&amp;#10;for i in range(r_c):&amp;#10;    x = random.uniform(-1, 1)&amp;#10;    y = random.uniform(-1,1)&amp;#10;    x = x*185&amp;#10;    y = y*285&amp;#10;    rect_r[i].pos = [c2+x,y]&amp;#10;&amp;#10;&amp;#10;for i in range(state_r):&amp;#10;    img = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        image=&quot;tree.png&quot;,&amp;#10;        units=&quot;pix&quot;&amp;#10;    )&amp;#10;    size_x = img.size[0]&amp;#10;    size_y = img.size[1]&amp;#10;    img.size = [size_x * 0.25, size_y * 0.25]&amp;#10;#    print(img.size)&amp;#10;    img_tree.append(img)&amp;#10;&amp;#10;for i in range(state_r):&amp;#10;    img = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        image=&quot;tree.png&quot;,&amp;#10;        units=&quot;pix&quot;&amp;#10;    )&amp;#10;    size_x = img.size[0]&amp;#10;    size_y = img.size[1]&amp;#10;    img.size = [size_x * 0.25, size_y * 0.25]&amp;#10;    img_ltree.append(img)&amp;#10;    &amp;#10;for i in range(state_r):&amp;#10;    img = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        image=&quot;tree.png&quot;,&amp;#10;        units=&quot;pix&quot;&amp;#10;    )&amp;#10;    size_x = img.size[0]&amp;#10;    size_y = img.size[1]&amp;#10;    img.size = [size_x * 0.25, size_y * 0.25]&amp;#10;    img_rtree.append(img)&amp;#10;    &amp;#10;#print(len(img_ltree))&amp;#10;#print(len(img_rtree))&amp;#10;&amp;#10;for i in range(len(img_tree)):&amp;#10;    x = random.uniform(-1, 1)&amp;#10;    y = random.uniform(-1,1)&amp;#10;    size_x = img_tree[0].size[0]&amp;#10;    size_y = img_tree[0].size[1]&amp;#10;    &amp;#10;    x = x*(200-size_x)&amp;#10;    y = y*(300-size_y)&amp;#10;#    print(x,y)&amp;#10;    img_tree[i].pos = [x,y]&amp;#10;&amp;#10;for i in range(len(img_tree)):&amp;#10;    pos = img_tree[i].pos&amp;#10;    x_l = pos[0] + c1&amp;#10;    y_l = pos[1]&amp;#10;    x_r = pos[0] + c2&amp;#10;    y_r = pos[1]&amp;#10;    print(pos)&amp;#10;    print(x_l,y_l)&amp;#10;    print(x_r,y_r)&amp;#10;    img_ltree[i].pos = [x_l,y_l]&amp;#10;    img_rtree[i].pos = [x_r,y_r]&amp;#10;    &amp;#10;&amp;#10;#for i in range(len(img_rtree)):&amp;#10;#    posr = img_tree[i].pos&amp;#10;#    x = posr[0] + c2&amp;#10;#    y = posr[1]&amp;#10;#    print(x,y)&amp;#10;#    img_rtree[i].pos = [x,y]&amp;#10;&amp;#10;clock.reset()&amp;#10;while clock.getTime() &lt; 5: # draw moving stimulus&amp;#10;    if state_t:&amp;#10;        box_t.draw()&amp;#10;    box1.draw()&amp;#10;    box2.draw()&amp;#10;    &amp;#10;    for i in range(state_r):&amp;#10;#        img_ltree[i].draw()&amp;#10;        img_rtree[i].draw()&amp;#10;        img_ltree[i].draw()&amp;#10;&amp;#10;    for i in range(l_c):&amp;#10;        rect_l[i].draw()&amp;#10;    for i in range(r_c):&amp;#10;        rect_r[i].draw()&amp;#10;    &amp;#10;    win.flip() # make the drawn things visible&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData('left_competitors', l_c)&amp;#10;thisExp.addData('right_competitors', r_c)&amp;#10;thisExp.addData('threat', state_t)&amp;#10;thisExp.addData('no_rewards', state_r)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="view" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Patch_Selection">
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Foraging">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="import os&amp;#10;from psychopy import visual, event, core&amp;#10;import random&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="reward_value = 10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="box = visual.Rect(&amp;#10;    win=win,&amp;#10;    units=&quot;pix&quot;,&amp;#10;    width=400,&amp;#10;    height=600,&amp;#10;    fillColor= 'black',&amp;#10;    lineColor=[-1, -1, 1]&amp;#10;)&amp;#10;box.draw()&amp;#10;&amp;#10;data = thisExp.getAllEntries()&amp;#10;key = data[0]['key_resp.keys']&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;if key == 'left':&amp;#10;    for i in range(len(rect_l)):&amp;#10;        position = rect_l[i].pos&amp;#10;        position[0] -= -250&amp;#10;        rect_l[i].pos = position&amp;#10;    #        &amp;#10;    n = len(rect_l)&amp;#10;    p = random.randint(0,n-1)&amp;#10;    print(key)&amp;#10;    clock = core.Clock()&amp;#10;&amp;#10;    LEFT = -10&amp;#10;    RIGHT = 10&amp;#10;    rect = visual.Rect(&amp;#10;        win=win,&amp;#10;        units=&quot;pix&quot;,&amp;#10;        width=400,&amp;#10;        height=600,&amp;#10;        fillColor= 'black',&amp;#10;        lineColor=[-1, -1, 1]&amp;#10;    )&amp;#10;&amp;#10;    clock.reset()&amp;#10;    &amp;#10;    p_pos = rect_l[p].pos&amp;#10;    depriciated_reward =[];&amp;#10;    reward_ctr = 2; &amp;#10;    reward_list = list(range(state_r));&amp;#10;    print(&quot;state_r&quot;,state_r);&amp;#10;&amp;#10;    while clock.getTime()&lt;10: # draw moving stimulus&amp;#10;        if(clock.getTime() &gt; reward_ctr): &amp;#10;            reward_ctr= reward_ctr + 2; &amp;#10;            rnd = random.randint(0,len(reward_list))&amp;#10;            del reward_list[rnd:rnd +1 ]&amp;#10;            print(reward_list);&amp;#10;        k = event.getKeys()&amp;#10;        if k: # if there was an actual key pressed:&amp;#10;            if k[0] == 'left':&amp;#10;                p_pos[0] += LEFT&amp;#10;            elif k[0] == 'right':&amp;#10;                p_pos[0] += RIGHT&amp;#10;            elif k[0] == 'up':&amp;#10;                p_pos[1] += RIGHT&amp;#10;            elif k[0] == 'down':&amp;#10;                p_pos[1] += LEFT&amp;#10;            elif k[0] == 'q':&amp;#10;                core.quit()&amp;#10;    #            &amp;#10;        if p_pos[0] &gt; (200-15):&amp;#10;            p_pos[0] = (200-15)&amp;#10;        elif p_pos[0]&lt;-(200-15):&amp;#10;            p_pos[0] = -(200-15)&amp;#10;        if p_pos[1]&gt; (300-15):&amp;#10;            p_pos[1] = (300-15)&amp;#10;        elif p_pos[1]&lt;-(300-15):&amp;#10;            p_pos[1] = -(300-15)&amp;#10;&amp;#10;        rect_l[p].pos = p_pos # directly update both x *and* y&amp;#10;        box.draw()&amp;#10;        for i in range(n):&amp;#10;            rect_l[i].draw()&amp;#10;        for i in reward_list:&amp;#10;            img_tree[i].draw()&amp;#10;&amp;#10;        win.flip() # make the drawn things visible&amp;#10;else:&amp;#10;    for i in range(len(rect_r)):&amp;#10;        position = rect_r[i].pos&amp;#10;        position[0] -= 250&amp;#10;        rect_r[i].pos = position&amp;#10;    #        &amp;#10;    n = len(rect_r)&amp;#10;    p = random.randint(0,n-1)&amp;#10;    print(key)&amp;#10;    clock = core.Clock()&amp;#10;&amp;#10;    LEFT = -10&amp;#10;    RIGHT = 10&amp;#10;    rect = visual.Rect(&amp;#10;        win=win,&amp;#10;        units=&quot;pix&quot;,&amp;#10;        width=400,&amp;#10;        height=600,&amp;#10;        fillColor= 'black',&amp;#10;        lineColor=[-1, -1, 1]&amp;#10;    )&amp;#10;&amp;#10;    clock.reset()&amp;#10;    p_pos = rect_r[p].pos&amp;#10;    reward_ctr = 2; &amp;#10;    reward_list = list(range(state_r));&amp;#10;    print(&quot;state_r&quot;,state_r);&amp;#10;    while clock.getTime()&lt;10: # draw moving stimulus&amp;#10;      &amp;#10;        if(clock.getTime() &gt; reward_ctr): &amp;#10;            reward_ctr= reward_ctr + 2; &amp;#10;            rnd = random.randint(0,len(reward_list))&amp;#10;            del reward_list[rnd:rnd +1 ]&amp;#10;            #print(reward_list);&amp;#10;        &amp;#10;        k = event.getKeys()&amp;#10;        if k: # if there was an actual key pressed:&amp;#10;            if k[0] == 'left':&amp;#10;                p_pos[0] += LEFT&amp;#10;            elif k[0] == 'right':&amp;#10;                p_pos[0] += RIGHT&amp;#10;            elif k[0] == 'up':&amp;#10;                p_pos[1] += RIGHT&amp;#10;            elif k[0] == 'down':&amp;#10;                p_pos[1] += LEFT&amp;#10;            elif k[0] == 'q':&amp;#10;                core.quit()&amp;#10;    #            &amp;#10;        if p_pos[0] &gt; (200-15):&amp;#10;            p_pos[0] = (200-15)&amp;#10;        elif p_pos[0]&lt;-(200-15):&amp;#10;            p_pos[0] = -(200-15)&amp;#10;        if p_pos[1]&gt; (300-15):&amp;#10;            p_pos[1] = (300-15)&amp;#10;        elif p_pos[1]&lt;-(300-15):&amp;#10;            p_pos[1] = -(300-15)&amp;#10;&amp;#10;        rect_r[p].pos = p_pos # directly update both x *and* y&amp;#10;        box.draw()&amp;#10;        &amp;#10;        for i in range(n):&amp;#10;            rect_r[i].draw()&amp;#10;        &amp;#10;        for i in reward_list:&amp;#10;            img_tree[i].draw()&amp;#10;        &amp;#10;        win.flip() # make the drawn things visible" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="routine_1"/>
    <Routine name="routine"/>
    <Routine name="Forage">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="import os&amp;#10;from psychopy import visual, event, core&amp;#10;&amp;#10;win = visual.Window(units = 'pix', color = 'black') # Set the window&amp;#10;&amp;#10;x = 0 # initial positions&amp;#10;y = 0&amp;#10;&amp;#10;LEFT = -100&amp;#10;RIGHT = 100&amp;#10;&amp;#10;# create just once, no need to specify a position yet:&amp;#10;circle = visual.Circle(win, radius = 10, fillColor= 'yellow')&amp;#10;&amp;#10;while True: # draw moving stimulus&amp;#10;    &amp;#10;    k = event.getKeys()&amp;#10;    if k: # if there was an actual key pressed:&amp;#10;        if k[0] == 'left':&amp;#10;            x = LEFT&amp;#10;        elif k[0] == 'right':&amp;#10;            x = RIGHT&amp;#10;        elif k[0] == 'q':&amp;#10;            core.quit()&amp;#10;&amp;#10;    y += 2 # make circle constantly move upwards&amp;#10;    circle.pos = [x, y] # directly update both x *and* y&amp;#10;    circle.draw()&amp;#10;    win.flip() # make the drawn things visible&amp;#10;&amp;#10;win.close()&amp;#10;core.quit()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Welcome"/>
    <Routine name="ViewPatch"/>
    <Routine name="Patch_Selection"/>
    <Routine name="Foraging"/>
    <Routine name="End"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
